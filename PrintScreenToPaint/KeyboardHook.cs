// <copyright file="KeyboardHook.cs" company="PublicDomain.com">
//     CC0 1.0 Universal (CC0 1.0) - Public Domain Dedication
//     https://creativecommons.org/publicdomain/zero/1.0/legalcode
// </copyright>
// <auto-generated />

namespace PrintScreenToPaint
{
    // Directives
    using System;
    using System.Diagnostics;
    using System.Drawing;
    using System.Drawing.Imaging;
    using System.IO;
    using System.Runtime.InteropServices;
    using System.Windows.Forms;

    /// <summary>
    /// Keyboard hook.
    /// </summary>
    public static class KeyboardHook
    {
        /// <summary>
        /// Target key press event handler.
        /// </summary>
        public delegate void TargetKeyPressEventHandler();

        /// <summary>
        /// Occurs when target key is pressed.
        /// </summary>
        public static event TargetKeyPressEventHandler TargetKeyPress;

        /// <summary>
        /// Gets or sets the target key.
        /// </summary>
        /// <value>The target key.</value>
        public static Keys TargetKey { get; set; } = Keys.PrintScreen;

        /// <summary>
        /// The wh keyboard ll.
        /// </summary>
        private const int WH_KEYBOARD_LL = 13;

        /// <summary>
        /// The wm keydown.
        /// </summary>
        private const int WM_KEYDOWN = 0x0100;

        /// <summary>
        /// The proc.
        /// </summary>
        private static LowLevelKeyboardProc proc = HookCallback;

        /// <summary>
        /// The hook identifier.
        /// </summary>
        private static IntPtr hookID = IntPtr.Zero;

        /// <summary>
        /// Low level keyboard proc.
        /// </summary>
        private delegate IntPtr LowLevelKeyboardProc(int nCode, IntPtr wParam, IntPtr lParam);

        /// <summary>
        /// Sets the windows hook ex.
        /// </summary>
        /// <returns>The windows hook ex.</returns>
        /// <param name="idHook">Identifier hook.</param>
        /// <param name="lpfn">Lpfn.</param>
        /// <param name="hMod">H mod.</param>
        /// <param name="dwThreadId">Dw thread identifier.</param>
        [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
        private static extern IntPtr SetWindowsHookEx(int idHook, LowLevelKeyboardProc lpfn, IntPtr hMod, uint dwThreadId);

        /// <summary>
        /// Unhooks the windows hook ex.
        /// </summary>
        /// <returns><c>true</c>, if windows hook ex was unhooked, <c>false</c> otherwise.</returns>
        /// <param name="hhk">Hhk.</param>
        [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
        [return: MarshalAs(UnmanagedType.Bool)]
        private static extern bool UnhookWindowsHookEx(IntPtr hhk);

        /// <summary>
        /// Calls the next hook ex.
        /// </summary>
        /// <returns>The next hook ex.</returns>
        /// <param name="hhk">Hhk.</param>
        /// <param name="nCode">N code.</param>
        /// <param name="wParam">W parameter.</param>
        /// <param name="lParam">L parameter.</param>
        [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
        private static extern IntPtr CallNextHookEx(IntPtr hhk, int nCode, IntPtr wParam, IntPtr lParam);

        /// <summary>
        /// Gets the module handle.
        /// </summary>
        /// <returns>The module handle.</returns>
        /// <param name="lpModuleName">Lp module name.</param>
        [DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
        private static extern IntPtr GetModuleHandle(string lpModuleName);


        /// <summary>
        /// Hooks the callback.
        /// </summary>
        /// <returns>The callback.</returns>
        /// <param name="nCode">N code.</param>
        /// <param name="wParam">W parameter.</param>
        /// <param name="lParam">L parameter.</param>
        private static IntPtr HookCallback(int nCode, IntPtr wParam, IntPtr lParam)
        {
            // Check for target key on key down
            if (nCode >= 0 && wParam == (IntPtr)WM_KEYDOWN && (Keys)Marshal.ReadInt32(lParam) == TargetKey)
            {
                // Check if not null
                if (TargetKeyPress != null)
                {
                    // Fire the event
                    TargetKeyPress();
                }
            }

            // Call next hook
            return CallNextHookEx(hookID, nCode, wParam, lParam);
        }

        /// <summary>
        /// Enables the hook.
        /// </summary>
        public static void EnableHook()
        {
            // Set windows hook
            hookID = SetWindowsHookEx(WH_KEYBOARD_LL, proc, GetModuleHandle(Process.GetCurrentProcess().MainModule.ModuleName), 0);
        }

        /// <summary>
        /// Disables the hook.
        /// </summary>
        public static void DisableHook()
        {
            // Unhook using ID
            UnhookWindowsHookEx(hookID);
        }
    }
}
